i
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
j<-1
print(j)
seed <- j*seed0
set.seed(seed)
df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
      if(k>2)#
        browser()#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
      if(k>10)#
        browser()#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
      if(k>50)#
        browser()#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
Q
K
KR
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
      if(k>90)#
        browser()#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
      if(k>80)#
        browser()#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      if(k>80)#
        browser()#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>80)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>70)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
theta_old <- theta
head(grade)
Z[i,,]<-step.S_replace(x[i],theta,M)
head(Z)
Z
s<-step.SA(x,Z,s,gamma[k])
s
eval(s)
theta<-step.M(s,n)
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>75)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>73)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>74)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>75)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>74)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
eval(s)
i
theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i
liste[[k]]
Z[i,,]<-step.S_replace(x[i],theta,M)
i
x[i]
tau<-compute.tau(x,theta)
tau<-compute.tau(x[i],theta)
tau
theta
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>73)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- compute.stat(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
theta
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>73)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- step.SA(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>73)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s <- step.SA(x,Z_old)#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      if(k>73)#
        browser()#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s<-step.SA(x,Z_old,s,gamma[k])#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}
theta
Q
mixt.isaem3 <- function(x, theta0, K, K1=NULL, M=1, alpha=1, nb_r=1)#
{#
  G<-length(mu)#
  col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
  if (is.null(K1))  K1 <- 1#
  K2 <- K - K1 #second phase iterations#
  if (length(alpha)==1)#
  gamma<-c(rep(1,K1),1/(1:K2)^alpha)#
  else{#
    L <- 10#
    KL <- round(K2/L)#
    alpha <- seq(alpha[1], alpha[2], length.out = L)#
    gamma <- rep(1,K1)#
    dl <- 0#
    for (l in (1:L))#
    {#
      if (l==L)  KL <- K2 - (L-1)*KL#
      gamma <- c(gamma,1/(dl + (1:KL))^alpha[l])#
      dl <- (dl + KL)^(alpha[l]/alpha[l+1])#
    }#
  }#
#
  theta.est <- matrix(NA,K+1,3*G+1)#
  theta.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  thetat.est <- matrix(NA,K+1,3*G+1)#
  thetat.est[1,] <- c(0, theta0$p, theta0$mu, theta0$sigma)#
  theta<-theta0#
  s<-list(s1=0,s2=0,s3=0)#
  st<-list(s1=0,s2=0,s3=0)#
  liste <- vector("list", length=nsim)#
  Z<-step.S_replace(x,theta,M)#
  Z_old<-Z#
  n<-length(x)#
  grade <- matrix(NA,n,2)#
  theta1 <- matrix(NA,n,3*G)#
  df1 <- as.data.frame(theta1)#
  for (k in 1:K)#
  {#
    diff <- matrix(NA,n,2)#
    if (k<2)#
    {#
      for (l in 1:n)#
      {#
        Z_old[l,,] <- Z[l,,]#
        Z[l,,]<-step.S_replace(x[l],theta,M)#
        st<-step.SA(x,Z,st,gamma[k])#
        thetat<-step.M(st,n)#
        thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
        df <- as.data.frame(thetat.est)#
        names(df) <- col.names#
        df1[l,] <- df[(k+1),2:10]#
        grade[l,2] <- norm(t((df1[l,] - df[k,2:10])))#
        grade[l,1] <- l#
        Z[l,,] <- Z_old[l,,]#
      }#
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
    } else#
    {#
      theta_old <- theta  #
      grade <- grade[order(grade[,2],decreasing=TRUE),]#
      i <- grade[1:nb_r,1]#
      liste[[k]] <- i#
      # i <- sample(1:n,nb_r)#
      Z[i,,]<-step.S_replace(x[i],theta,M)#
      s<-step.SA(x,Z,s,gamma[k])#
      theta<-step.M(s,n)#
      theta.est[k+1,] <- c(k, theta$p, theta$mu, theta$sigma)#
      df <- as.data.frame(theta.est)#
      names(df) <- col.names#
      grade[i,2] <- norm(t((df[(k+1),2:10] - df[k,2:10])))#
      #computing the parameter as if we had chosen the individual liste[k-1]#
      Z_old[liste[[k-1]],,]<-step.S_replace(x[liste[[k-1]]],theta_old,M)#
      s<-step.SA(x,Z_old,s,gamma[k])#
      thetat<-step.M(s,n)#
      thetat.est[k+1,] <- c(k, thetat$p, thetat$mu, thetat$sigma)#
      dft <- as.data.frame(thetat.est)#
      grade[liste[[k-1]],2] <- norm(t((dft[(k+1),2:10] - df[(k+1),2:10])))#
    }#
  }#
  # df <- as.data.frame(theta.est)#
  # names(df) <- col.names#
  return(df)#
}
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 3#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 10#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table3r <- NULL#
table3r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table3r <- table3r+diffr[diffr$sim==j,2:10]#
}#
table3r$iteration <- 0:KR#
table3r$algo <- 'R'#
table3r <- subset(table3r, select=c(10,1:11))#
table3r[,11]<-NULL#
table3r[,2:10] <- 1/nsim*table3r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table3r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table3r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table3r$iteration <- 1:(KR*nb_r+1)#
#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 10#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table4r <- NULL#
table4r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table4r <- table4r+diffr[diffr$sim==j,2:10]#
}#
table4r$iteration <- 0:KR#
table4r$algo <- 'R'#
table4r <- subset(table4r, select=c(10,1:11))#
table4r[,11]<-NULL#
table4r[,2:10] <- 1/nsim*table4r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table4r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table4r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table4r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
table3r$algo <- '10R'#
table4r$algo <- '10R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,table3r,table4r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 3#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 10#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table3r <- NULL#
table3r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table3r <- table3r+diffr[diffr$sim==j,2:10]#
}#
table3r$iteration <- 0:KR#
table3r$algo <- 'R'#
table3r <- subset(table3r, select=c(10,1:11))#
table3r[,11]<-NULL#
table3r[,2:10] <- 1/nsim*table3r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table3r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table3r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table3r$iteration <- 1:(KR*nb_r+1)#
#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 10#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table4r <- NULL#
table4r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table4r <- table4r+diffr[diffr$sim==j,2:10]#
}#
table4r$iteration <- 0:KR#
table4r$algo <- 'R'#
table4r <- subset(table4r, select=c(10,1:11))#
table4r[,11]<-NULL#
table4r[,2:10] <- 1/nsim*table4r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table4r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table4r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table4r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
table3r$algo <- '10R'#
table4r$algo <- '10R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,table3r,table4r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 3#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'#
#
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'#
#
variance <- NULL#
# variance <- rbind(table1r,tablenr)#
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'#
#
variance <- NULL#
# variance <- rbind(table1r,tablenr)#
variance <- rbind(table1r,table2r,tablenr)#
# variance <- rbind(table1r,table2r,table3r,table4r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
KNR <- 500#
K1 <-10#
K <- 300#
# Several Chains for the same iteration#
# M <- 10#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
post <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{#
  print(j)#
  df <- mixt.em(x[,j], theta, K)#
  post <- rbind(post,df$prob)#
  df <- mixt.ident3(df$param)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
#
##IEM#
#
iem <- NULL#
post <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.iem(x[,j], theta0, K)#
  post <- rbind(post,df$postprob)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem <- rbind(iem,df)#
}#
tabler <- iem[iem$rep==1,2:10]#
for (j in (2:nsim))#
{#
  tabler <- tabler+iem[iem$rep==j,2:10]#
}#
tabler$iteration <- 0:K#
tabler$algo <- 'IEM'#
tabler <- subset(tabler, select=c(10,1:11))#
tabler[,11]<-NULL#
tabler[,2:10] <- 1/nsim*tabler[,2:10]#
# ##IEM 1#
# iem1 <- NULL#
# ind1 <- NULL#
# post1 <- NULL#
# final1 <- NULL#
# for (j in (1:nsim))#
# {#
#   print(j)#
#   seed <- j*seed0#
#   set.seed(seed)#
#   df <- mixt.oiem(x[,j], theta0, K, df.em[[j]][K,2:10])#
#   ind1 <- rbind(ind1,df$indices)#
#   post1 <- rbind(post1,df$postprob)#
#   final1 <- rbind(final1,df$finalprob)#
#   df <- mixt.ident3(df$param)#
#   for (k in (0:K))#
#   {#
#     df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
#   }#
#   df$iteration <- 0:K#
#   df$rep <- j#
#   iem1 <- rbind(iem1,df)#
# }#
#
# table1r <- iem1[iem1$rep==1,2:10]#
# for (j in (2:nsim))#
# {#
#   table1r <- table1r+iem1[iem1$rep==j,2:10]#
# }#
# table1r$iteration <- 0:K#
# table1r$algo <- 'IEM1'#
# table1r <- subset(table1r, select=c(10,1:11))#
# table1r[,11]<-NULL#
# table1r[,2:10] <- 1/nsim*table1r[,2:10]#
##IEM 2#
#
iem2 <- NULL#
ind2 <- NULL#
post2 <- NULL#
rank <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.piem(x[,j], theta0, K)#
  ind2 <- rbind(ind2,df$indices)#
  post2 <- rbind(post2,df$postprob)#
  rank <- rbind(rank,df$rankings)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem2 <- rbind(iem2,df)#
}#
table2r <- NULL#
table2r <- iem2[iem2$rep==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+iem2[iem2$rep==j,2:10]#
}#
table2r$iteration <- 0:K#
table2r$algo <- 'IEM2'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
##IEM 3#
#
iem3 <- NULL#
ind3 <- NULL#
post3 <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.siem(x[,j], theta0, K)#
  ind3 <- rbind(ind3,df$indices)#
  post3 <- rbind(post3,df$postprob)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem3 <- rbind(iem3,df)#
}#
table3r <- NULL#
table3r <- iem3[iem3$rep==1,2:10]#
for (j in (2:nsim))#
{#
  table3r <- table3r+iem3[iem3$rep==j,2:10]#
}#
table3r$iteration <- 0:K#
table3r$algo <- 'IEM3'#
table3r <- subset(table3r, select=c(10,1:11))#
table3r[,11]<-NULL#
table3r[,2:10] <- 1/nsim*table3r[,2:10]#
compare<- NULL
getwd()
setwd("/Users/belhalkarimi/Desktop/iem_3gaussian")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
KNR <- 500#
K1 <-10#
K <- 300#
# Several Chains for the same iteration#
# M <- 10#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
post <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{#
  print(j)#
  df <- mixt.em(x[,j], theta, K)#
  post <- rbind(post,df$prob)#
  df <- mixt.ident3(df$param)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
#
##IEM#
#
iem <- NULL#
post <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.iem(x[,j], theta0, K)#
  post <- rbind(post,df$postprob)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem <- rbind(iem,df)#
}#
tabler <- iem[iem$rep==1,2:10]#
for (j in (2:nsim))#
{#
  tabler <- tabler+iem[iem$rep==j,2:10]#
}#
tabler$iteration <- 0:K#
tabler$algo <- 'IEM'#
tabler <- subset(tabler, select=c(10,1:11))#
tabler[,11]<-NULL#
tabler[,2:10] <- 1/nsim*tabler[,2:10]#
# ##IEM 1#
# iem1 <- NULL#
# ind1 <- NULL#
# post1 <- NULL#
# final1 <- NULL#
# for (j in (1:nsim))#
# {#
#   print(j)#
#   seed <- j*seed0#
#   set.seed(seed)#
#   df <- mixt.oiem(x[,j], theta0, K, df.em[[j]][K,2:10])#
#   ind1 <- rbind(ind1,df$indices)#
#   post1 <- rbind(post1,df$postprob)#
#   final1 <- rbind(final1,df$finalprob)#
#   df <- mixt.ident3(df$param)#
#   for (k in (0:K))#
#   {#
#     df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
#   }#
#   df$iteration <- 0:K#
#   df$rep <- j#
#   iem1 <- rbind(iem1,df)#
# }#
#
# table1r <- iem1[iem1$rep==1,2:10]#
# for (j in (2:nsim))#
# {#
#   table1r <- table1r+iem1[iem1$rep==j,2:10]#
# }#
# table1r$iteration <- 0:K#
# table1r$algo <- 'IEM1'#
# table1r <- subset(table1r, select=c(10,1:11))#
# table1r[,11]<-NULL#
# table1r[,2:10] <- 1/nsim*table1r[,2:10]#
##IEM 2#
#
iem2 <- NULL#
ind2 <- NULL#
post2 <- NULL#
rank <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.piem(x[,j], theta0, K)#
  ind2 <- rbind(ind2,df$indices)#
  post2 <- rbind(post2,df$postprob)#
  rank <- rbind(rank,df$rankings)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem2 <- rbind(iem2,df)#
}#
table2r <- NULL#
table2r <- iem2[iem2$rep==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+iem2[iem2$rep==j,2:10]#
}#
table2r$iteration <- 0:K#
table2r$algo <- 'IEM2'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
##IEM 3#
#
iem3 <- NULL#
ind3 <- NULL#
post3 <- NULL#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.siem(x[,j], theta0, K)#
  ind3 <- rbind(ind3,df$indices)#
  post3 <- rbind(post3,df$postprob)#
  df <- mixt.ident3(df$param)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  iem3 <- rbind(iem3,df)#
}#
table3r <- NULL#
table3r <- iem3[iem3$rep==1,2:10]#
for (j in (2:nsim))#
{#
  table3r <- table3r+iem3[iem3$rep==j,2:10]#
}#
table3r$iteration <- 0:K#
table3r$algo <- 'IEM3'#
table3r <- subset(table3r, select=c(10,1:11))#
table3r[,11]<-NULL#
table3r[,2:10] <- 1/nsim*table3r[,2:10]#
compare<- NULL
compare <- rbind(tabler,table2r,table3r)
var <- graphConvMC2_new(compare, title="IEMs",legend=TRUE)
var <- graphConvMC2_new(compare, title="IEMs",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}
getwd()
setwd("/Users/belhalkarimi/Desktop/isaem_3gaussian")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}
graphConvMC(dem, title="EM")
graphConvMC_new(dem, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}
KNR
K
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(K+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(K+1),]#
  df$iteration <- 0:K#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}
graphConvMC_new(diffnr, title="EM")
head(diffnr)
head(dem)
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(K+1),]#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
graphConvMC_new(diffnr, title="EM")
K
KL <- 5000
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KL, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(K+1),]#
  df$iteration <- 0:KL#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KL, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][(K+1),]#
  df$iteration <- 0:KL#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
K
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
graphConvMC_new(diffnr, title="EM")
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KL, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KL#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KL, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KL))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KL#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
graphConvMC_new(diffnr, title="EM")
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.2,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,8,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,19,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.2,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 15#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.5,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 15#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.4,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 15#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 200#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 15#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
graphConvMC_new(dem, title="EM")#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, K, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:K))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:K#
  df$rep <- j#
  diffnr <- rbind(diffnr,df)#
}#
#
graphConvMC_new(diffnr, title="EM")
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 5#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}
getwd()
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,10,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KR+1),]#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,14,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,14,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  df <- df - df.em[[j]][1:(KNR+1),]#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KNR+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,12,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KNR+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'#
#
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KR+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(KNR+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
K
df.em[[j]][(KR+1),2:10]
df.em[[j]][(K+1),2:10]
df.em[[j]][(K+2),2:10]
df.em[[j]][(K+1),2:10]
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
head(diffnr)
graphConvMC2_new(diffnr, title="ALGO - EM (same complexity)",legend=TRUE)
head(diffnr)
head(diffnr[,2:11])
head(diffnr[,2:10])
colnames(diffnr)[11] <- "rep"
head(diffnr)
graphConvMC2_new(diffnr, title="ALGO - EM (same complexity)",legend=TRUE)
head(variance)
graphConvMC_new(diffnr, title="ALGO - EM (same complexity)",legend=TRUE)
head(dem)
graphConvMC_new(dem, title="ALGO - EM (same complexity)",legend=TRUE)
graphConvMC_new(dem, title="ALGO - EM (same complexity)")
graphConvMC_new(diffnr, title="ALGO - EM (same complexity)")
graphConvMC2_new(tablenr, title="ALGO - EM (same complexity)")
head(df)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,14,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,14,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem2(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 2'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.1,1)*1#
K1 <-10#
K <- 500#
KNR <- 50#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 50#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.3,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
variance <- NULL#
variance <- rbind(table1r,table2r,tablenr)#
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)#
ggsave('isaem2_diffsigma.png',var)
source("mixtureAlgos.R")#
source("mixtureFunctions.R")#
theme_set(theme_bw())#
#
##############################################
#####LS and precision plots (Master)#####
##############################################
#
n <- 100#
weight<-c(0.5, 0.2,0.3) #
mu<-c(0,2,4)#
sigma<-c(1,0.1,1)*1#
K1 <-10#
K <- 5000#
KNR <- 500#
#
alpha1 <- 0.7#
alpha2 <- 0.4#
seed0=44444#
# ylim <- c(0.15, 0.5, 0.4)#
ylim <- c(0.1, 0.3, 0.3)#
#
M <- 1#
nsim <- 10#
##
G<-length(mu)#
col.names <- c("iteration", paste0("p",1:G), paste0("mu",1:G), paste0("sigma",1:G))#
theta<-list(p=weight,mu=mu,sigma=sigma)#
# theta0<-list(p=weight0,mu=mu0,sigma=sigma0)#
theta0<-theta#
##  Simulation#
x <- matrix(0,nrow=n,ncol=nsim)#
for (j in (1:nsim))#
{#
  seed <- j*seed0#
  set.seed(seed)#
  xj<-mixt.simulate(n,weight,mu,sigma)#
  x[,j] <- xj#
}#
## EM#
print('EM')#
dem <- NULL#
df.em <- vector("list", length=nsim)#
for (j in (1:nsim))#
{ print(j)#
  df <- mixt.em(x[,j], theta, K)#
  df <- mixt.ident3(df)#
  df$rep <- j#
  dem <- rbind(dem,df)#
  df$rep <- NULL#
  df.em[[j]] <- df#
}#
# graphConvMC(dem, title="EM")#
#
##  SAEM1 replacement vs EM#
print('SAEM original 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1_replace1(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table1r <- NULL#
table1r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table1r <- table1r+diffr[diffr$sim==j,2:10]#
}#
table1r$iteration <- 0:KR#
table1r$algo <- 'R'#
table1r <- subset(table1r, select=c(10,1:11))#
table1r[,11]<-NULL#
table1r[,2:10] <- 1/nsim*table1r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table1r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table1r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table1r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1new replacement vs EM#
print('SAEM NEW 50R')#
nb_r <- 50#
KR <- KNR*n/nb_r#
diffr <- NULL#
#
for (j in (1:nsim))#
{#
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.isaem3(x[,j], theta0, KR, K1, alpha=0.6, M, nb_r)#
  df <- mixt.ident3(df)#
  for (k in (0:KR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KR#
  df$sim <- j#
  diffr <- rbind(diffr,df)#
}#
diffr[,2:10] <- diffr[,2:10]^2#
table2r <- NULL#
table2r <- diffr[diffr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  table2r <- table2r+diffr[diffr$sim==j,2:10]#
}#
table2r$iteration <- 0:KR#
table2r$algo <- 'R'#
table2r <- subset(table2r, select=c(10,1:11))#
table2r[,11]<-NULL#
table2r[,2:10] <- 1/nsim*table2r[,2:10]#
Lr <- NULL#
for (i in (2:(KR+1)))#
{#
  Lr <- rbind(Lr,table2r[i,2:10])#
}#
for (l in (0:(KR-1)))#
{#
  table2r[(l*nb_r+2):((l+1)*nb_r+1),2:10] <- Lr[l+1,]#
}#
table2r$iteration <- 1:(KR*nb_r+1)#
##  SAEM1 vs EM#
print('SAEM NR')#
diffnr <- NULL#
for (j in (1:nsim))#
{ #
  print(j)#
  seed <- j*seed0#
  set.seed(seed)#
  df <- mixt.saem1(x[,j], theta0, KNR, K1, alpha=0.6, M)#
  df <- mixt.ident3(df)#
  for (k in (0:KNR))#
  {#
    df[k+1,2:10] <- (df[k+1,2:10] - df.em[[j]][(K+1),2:10])^2#
  }#
  df$iteration <- 0:KNR#
  df$sim <- j#
  diffnr <- rbind(diffnr,df)#
}#
diffnr[,2:10] <- diffnr[,2:10]^2#
tablenr <- NULL#
tablenr <- diffnr[diffnr$sim==1,2:10]#
for (j in (2:nsim))#
{#
  tablenr <- tablenr+diffnr[diffnr$sim==j,2:10]#
}#
tablenr$iteration <- 0:KNR#
tablenr$algo <- 'NR'#
tablenr <- subset(tablenr, select=c(10,1:11))#
tablenr[,11]<-NULL#
tablenr[,2:10] <- 1/nsim*tablenr[,2:10]#
#
Lnr <- NULL#
for (i in (2:(KNR+1)))#
{#
  Lnr <- rbind(Lnr,tablenr[i,2:10])#
}#
#
for (ind in (0:(KNR-1)))#
{#
  tablenr[(ind*n+2):((ind+1)*n+1),2:10] <- Lnr[ind+1,]#
}#
tablenr$iteration <- 1:(KNR*n+1)#
#
table1r$algo <- '50R'#
table2r$algo <- '50R 3'#
tablenr$algo <- 'NR'
variance <- NULL
variance <- rbind(table1r,table2r,tablenr)
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
KNR
n
variance <- NULL
variance <- rbind(table1r[1:10000],table2r[1:10000],tablenr[1:10000])
variance <- rbind(table1r[1:10000,],table2r[1:10000,],tablenr[1:10000,])
var <- graphConvMC2_new(variance, title="ALGO - EM (same complexity)",legend=TRUE)
